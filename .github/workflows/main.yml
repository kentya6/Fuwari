name: CI

on:
  push:
    branches: [ master ]
    tags:
    - 'v*'
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: [ macos-latest ]

    steps:
    - name: Select latest Xcode
      run: "sudo xcode-select -s /Applications/Xcode_13.2.app"
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        #echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Install deps
      run: |
        brew install make create-dmg ripgrep
        echo "/usr/local/opt/make/libexec/gnubin" >> $GITHUB_PATH

    - uses: actions/checkout@v2

    - uses: actions/cache@v1
      id: carthage-cache
      with:
        path: Carthage
        key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}

    - name: Carthage
      if: steps.carthage-cache.outputs.cache-hit != 'true'
      run: |
        carthage bootstrap --use-xcframeworks

    - name: Build and make dmg
      run: |
        make dmg

    - name: Upload artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: Fuwari
        path: ./dist

  pre-release:
    needs: build
    runs-on: [ macos-latest ]
    if: "!startsWith(github.ref, 'refs/tags/v')"
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: Fuwari
        path: ./dist

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          dist/Fuwari.dmg

  release:
    needs: build
    runs-on: [ macos-latest ]
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: Fuwari
        path: ./dist

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        files: |
          dist/Fuwari.dmg
